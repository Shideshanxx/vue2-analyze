{"version":3,"file":"vue.js","sources":["../src/global-api/const.js","../src/util/index.js","../src/observer/array.js","../src/observer/dep.js","../src/observer/index.js","../src/util/next-tick.js","../src/observer/scheduler.js","../src/observer/watcher.js","../src/state.js","../src/compiler/parse.js","../src/compiler/codegen.js","../src/compiler/index.js","../src/vdom/patch.js","../src/lifecycle.js","../src/init.js","../src/vdom/index.js","../src/render.js","../src/global-api/mixin.js","../src/global-api/extend.js","../src/global-api/assets.js","../src/global-api/index.js","../src/index.js"],"sourcesContent":["export const ASSETS_TYPE = [\"component\", \"directive\", \"filter\"];","import { ASSETS_TYPE } from \"../global-api/const\";\r\n\r\nexport const LIFECYCLE_HOOKS = [\r\n  \"beforeCreate\",\r\n  \"created\",\r\n  \"beforeMount\",\r\n  \"mounted\",\r\n  \"beforeUpdate\",\r\n  \"updated\",\r\n  \"beforeDestroy\",\r\n  \"destroyed\",\r\n];\r\n\r\nconst strats = {}; // 存放各种策略\r\n// 生命周期的合并策略\r\nfunction mergeHook(parentVal, childVal) {\r\n  if (childVal) {\r\n    if (parentVal) {\r\n      // 简单说就是数组的合并\r\n      return parentVal.concat(childVal);  // 后续合并\r\n    } else {\r\n      return [childVal];  // 第一次合并结果是一个数组（因为第一次合并时，Vue.options为空对象，parentVal为undefined，会走这一步）\r\n    }\r\n  } else {\r\n    return parentVal;\r\n  }\r\n}\r\nLIFECYCLE_HOOKS.forEach((hook) => {\r\n  strats[hook] = mergeHook;\r\n})\r\n\r\n// components、directives、filters的合并策略\r\nfunction mergeAssets(parentVal, childVal) {\r\n  // 比如有【同名】的全局组件和自己定义的局部组件，那么parentVal代表全局组件，自己定义的组件是childVal\r\n  // 首先会查找自已局部组件有就用自己的，没有就从原型继承全局组件，res.__proto__===parentVal\r\n  const res = Object.create(parentVal); \r\n  if (childVal) {\r\n    for (let k in childVal) {\r\n      res[k] = childVal[k];\r\n    }\r\n  }\r\n  return res;\r\n}\r\nASSETS_TYPE.forEach((type) => {\r\n  strats[type + \"s\"] = mergeAssets;\r\n});\r\n\r\nexport function mergeOptions(parent, child) {\r\n  const options = {}; // 合并后的结果\r\n  /**\r\n   * 遍历父子option中所有的属性，调用mergeFiled进行合并\r\n   */\r\n  for (let k in parent) {   // 遍历父亲所有属性，进行合并\r\n    mergeFiled(k);\r\n  }\r\n\r\n  for (let k in child) {   // 遍历儿子；对儿子有、父亲没有的属性，同样进行合并\r\n    if (!parent.hasOwnProperty(k)) {\r\n      mergeFiled(k);\r\n    }\r\n  }\r\n\r\n  // 真正进行属性合并的方法\r\n  function mergeFiled(key) {\r\n    let parentVal = parent[key]\r\n    let childVal = child[key]\r\n    // 1. 使用【策略模式】处理生命周期：生命周期的合并，需要合并成数组\r\n    if(strats[key]) {\r\n      // 不同策略调用对应的方法 来合并parentVal和childVal\r\n      options[key] = strats[key](parentVal, childVal);\r\n    } else {\r\n      // 2. 生命周期外其他数据的合并\r\n\r\n      // 如果parentVal和childVal都是对象的话，则进行对象的合并\r\n      if(isObject(parentVal) && isObject(childVal)) {\r\n        options[key] = {...parentVal, ...childVal}\r\n      } else {\r\n        // 如果有一方为基本数据类型/函数\r\n        // 儿子有则以儿子为准；\r\n        // 儿子没有，父亲有，则取父亲的属性\r\n        options[key] = childVal || parentVal\r\n      }\r\n    }\r\n  }\r\n  // 真正合并字段方法\r\n  // function mergeFiled(k) {\r\n  //   // 【策略模式】\r\n  //   if (strats[k]) {  // 如果有对应的策略\r\n  //     options[k] = strats[k](parent[k], child[k]);\r\n  //   } else {\r\n  //     // 默认策略\r\n  //     options[k] = child[k] ? child[k] : parent[k];\r\n  //   }\r\n  // }\r\n  return options\r\n}\r\n\r\n// 判断val是否是对象/数组\r\nexport function isObject(val) {\r\n  return typeof val === \"object\" && val !== null;\r\n}\r\n\r\n// 判断是否是函数\r\nexport function isFunction(val) {\r\n  return typeof val === \"function\";\r\n}\r\n\r\n// 判断tagName是否是普通标签\r\nexport function isReservedTag(tagName) {\r\n  // 定义常见标签\r\n  let str =\r\n    \"html,body,base,head,link,meta,style,title,\" +\r\n    \"address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,\" +\r\n    \"div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,\" +\r\n    \"a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,\" +\r\n    \"s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,\" +\r\n    \"embed,object,param,source,canvas,script,noscript,del,ins,\" +\r\n    \"caption,col,colgroup,table,thead,tbody,td,th,tr,\" +\r\n    \"button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,\" +\r\n    \"output,progress,select,textarea,\" +\r\n    \"details,dialog,menu,menuitem,summary,\" +\r\n    \"content,element,shadow,template,blockquote,iframe,tfoot\";\r\n  let obj = {};\r\n  str.split(\",\").forEach((tag) => {\r\n    obj[tag] = true;\r\n  });\r\n  return obj[tagName];\r\n}\r\n","// arrayMethods是继承自Array.prototype，不直接修改Array.prototype，不污染Array.prototype\r\nlet oldArrayPrototype = Array.prototype\r\nexport let arrayMethods = Object.create(oldArrayPrototype)\r\n\r\nlet methods = [\r\n    'push',\r\n    'pop',\r\n    'unshift',\r\n    'shift',\r\n    'sort',\r\n    'reverse',\r\n    'splice'\r\n]\r\n\r\nmethods.forEach(method => {\r\n    arrayMethods[method] = function(...args) {\r\n        const result = oldArrayPrototype[method].call(this,...args) // this指向调用该方法的data（即经过响应式处理的数组）\r\n\r\n        // 对于数组中新增的元素，也需要进行监控\r\n        const ob = this.__ob__;\r\n        let inserted;\r\n        switch (method) {\r\n            case 'push':\r\n            case 'unshift':\r\n                inserted = args;\r\n                break;\r\n            case \"splice\":\r\n                inserted = args.slice(2);\r\n            default:\r\n                break;\r\n        }\r\n        // inserted是个数组，需要调用observeArray来监测\r\n        if (inserted) ob.observeArray(inserted);\r\n\r\n        // 数组派发更新\r\n        ob.dep.notify()\r\n        return result\r\n    }\r\n})","/**\r\n * 1. 每个属性我都给他分配一个dep（一对一的关系），一个dep可以存放多个watcher（一个属性可能对应多个watcher）\r\n * 2. 一个watcher中还可以存放多个dep（一个watcher可能对应多个属性，而dep与属性一一对应）\r\n * 3. dep具有唯一性\r\n */\r\nlet id = 0; // 给dep添加一个标识，保证它的唯一性\r\nexport default class Dep {\r\n  constructor() {\r\n    this.id = id++;\r\n    this.subs = [];  // 用来存放watcher\r\n  }\r\n\r\n  // 将dep实例放到watcher中\r\n  depend() {\r\n    // 如果当前存在watcher\r\n    if (Dep.target) {\r\n      // Dep.target即当前watcher，是在new Watcher时设置的\r\n      Dep.target.addDep(this); // this为dep实例（与属性一一对应），即把自身dep实例存放在watcher里面\r\n    }\r\n  }\r\n\r\n  // 依次执行subs里面的watcher更新方法\r\n  notify() {\r\n    this.subs.forEach((watcher) => watcher.update());\r\n  }\r\n\r\n  // 把watcher加入到dep实例的subs容器（因为一个dep可能对应多个watcher）\r\n  addSub(watcher) {\r\n    this.subs.push(watcher);\r\n  }\r\n}\r\n\r\n/**\r\n * targetStack定义在全局，为整个项目所有watcher\r\n * Dep.target定义在Dep自身而非prototype上，无法被实例继承，标识当前的watcher，具有唯一性\r\n */\r\n// 栈结构用来存众多watcher\r\nconst targetStack = [];\r\n// Dep.target 为 dep 当前所对应的watcher（即栈顶的watcher），默认为null\r\nDep.target = null;\r\n\r\nexport function pushTarget(watcher) {\r\n  targetStack.push(watcher);\r\n  Dep.target = watcher; // Dep.target指向当前watcher\r\n}\r\n\r\nexport function popTarget() {\r\n  // targetStack可能同时存在多个watcher（比如渲染watcher处于栈底，上面有computed watcher）\r\n  targetStack.pop(); // 当前watcher出栈 拿到上一个watcher\r\n  Dep.target = targetStack[targetStack.length - 1];\r\n}\r\n","import { isObject } from \"../util/index\";\r\nimport { arrayMethods } from \"./array\";\r\nimport Dep from \"./dep\";\r\n\r\n/**\r\n * 数据劫持：\r\n * 1. 如果是对象，则递归对象所有属性，进行劫持\r\n * 2. 如果数组，则会劫持数组方法（方法中如果是新增元素，会劫持新增元素），并对数组中类型为数组/对象的元素进行劫持\r\n */\r\n\r\nclass Observer {\r\n  // 通过new命令生成class实例时，会自动调用constructor()，即会执行this.walk(data)方法\r\n  constructor(data) {\r\n    this.value = data\r\n    this.dep = new Dep(); // 给data添加一个dep，收集data整体的一个dep（主要用于数组的依赖收集）\r\n\r\n    // 在数据data上新增属性 data.__ob__；指向经过new Observer(data)创建的实例，可以访问Observer.prototype上的方法observeArray、walk等\r\n    // 所有被劫持过的数据都有__ob__属性（通过这个属性可以判断数据是否被检测过）\r\n    Object.defineProperty(data, \"__ob__\", {\r\n      // 值指代的就是Observer的实例，即监控的数据\r\n      value: this,\r\n      //  设为不可枚举，防止在forEach对每一项响应式的时候监控__ob__，造成死循环\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: true,\r\n    });\r\n\r\n    /**\r\n     * 思考一下数组如何进行响应式？\r\n     * 和对象一样，对每一个属性进行代理吗？\r\n     * 如果数组长度为10000，给每一项设置代理，性能非常差！\r\n     * 用户很少通过索引操作数组，我们只需要重写数组的原型方法，在方法中进行响应式即可。\r\n     */\r\n    if (Array.isArray(data)) {\r\n      // 数组响应式处理\r\n      // 重写数组的原型方法，将data原型指向重写后的对象\r\n      data.__proto__ = arrayMethods;\r\n\r\n      // 如果数组中的数据是对象，需要监控对象的变化\r\n      this.observeArray(data);\r\n    } else {\r\n      // 对象响应式处理\r\n      this.walk(data);\r\n    }\r\n  }\r\n  observeArray(data) {\r\n    // 【关键】递归了，监控数组每一项（observe会筛选出对象和数组，其他的不监控）的改变，数组长度很长的话，会影响性能\r\n    // 【*********】数组并没有对索引进行监控，但是对数组的原型方法进行了改写，还对每一项（数组和对象类型）进行了监控\r\n    data.forEach((item) => {\r\n      observe(item);\r\n    });\r\n  }\r\n  walk(data) {\r\n    Object.keys(data).forEach((key) => {\r\n      // 对data中的每个属性进行响应式处理\r\n      defineReactive(data, key, data[key]);\r\n    });\r\n  }\r\n}\r\n\r\nfunction defineReactive(data, key, value) {\r\n  let childOb =  observe(value); // 【关键】递归，劫持对象中所有层级的所有属性\r\n  // 如果Vue数据嵌套层级过深 >> 性能会受影响【******************************】\r\n\r\n  let dep = new Dep() // 为每个属性创建一个独一无二的dep\r\n  Object.defineProperty(data, key, {\r\n    get() {\r\n      if(Dep.target) {\r\n        dep.depend()\r\n        // 如果属性的值依然是一个数组/对象，则对该 数组/对象 整体进行依赖收集\r\n        if(childOb) {\r\n          childOb.dep.depend(); // 让对象和数组也记录watcher\r\n          // 如果数据结构类似 {a:[1,2,[3,4,[5,6]]]} 这种数组多层嵌套，数组包含数组的情况，那么我们访问a的时候，只是对第一层的数组进行了依赖收集\r\n          // 里面的数组因为没访问到，所以无法收集依赖，但是如果我们改变了a里面的第二层数组的值，是需要更新页面的，所以需要对数组递归进行依赖收集\r\n          if (Array.isArray(value)) {\r\n            // 如果内部还是数组\r\n            dependArray(value); // 遍历 + 递归数组，对数组不同层级的所有数组元素 进行依赖收集\r\n          }\r\n        }\r\n      }\r\n      return value;\r\n    },\r\n    set(newVal) {\r\n      if (newVal === value) return;\r\n      // 对新数据进行观察\r\n      observe(newVal);\r\n      value = newVal;\r\n      console.log('-------------------数据更新，通知watchers更新-------------------')\r\n      dep.notify(); // 通知dep存放的watcher去更新--派发更新\r\n    },\r\n  });\r\n}\r\n\r\n// 递归收集数组依赖\r\nfunction dependArray(value) {\r\n  for (let e, i = 0, l = value.length; i < l; i++) {\r\n    e = value[i];\r\n    // 对每一项进行依赖收集\r\n    e && e.__ob__ && e.__ob__.dep.depend();\r\n    if (Array.isArray(e)) {\r\n      // 【递归】如果数组里面还有数组，就递归去收集依赖\r\n      dependArray(e);\r\n    }\r\n  }\r\n}\r\n\r\nexport function observe(data) {\r\n  // 如果是object类型（对象或数组）才观测；第一次调用observe(vm.$options._data)时，_data一定是个对象，官方要求的写法（data函数返回一个对象）\r\n  if (!isObject(data)) {\r\n    return;\r\n  }\r\n  // 如果已经是响应式的数据，直接return\r\n  if (data.__ob__) {\r\n    return data.__ob__;\r\n  }\r\n  // 返回经过响应式处理之后的data\r\n  return new Observer(data);\r\n}\r\n","const callbacks = [];\r\nfunction flushCallbacks() {\r\n  callbacks.forEach((cb) => cb());\r\n  waiting = false;\r\n}\r\nlet waiting = false;\r\n/**\r\n * 流程：\r\n * 1. watcher更新流程：\r\n *       ——> watcher.update()\r\n *       ——> queueWatcher(watcher)\r\n *       ——> 对watcher去重，并将watcher放到一个数组中；最后执行 nextTick(flushSchedulerQueue)（flushSchedulerQueue的作用是遍历watcher数组，调用watcher.run()）\r\n *       ——> 将 flushSchedulerQueue 放入一个 回调函数数组callbacks 中；定义一个微任务：flushCallbacks(callbacks)；\r\n * 2. vm.$nextTick(cb)：\r\n *       ——> 直接会执行Vue原型上的$nextTick()方法，即nextTick(cb)方法\r\n *       ——> 将cb 放入 上述的回调函数数组 callbacks 中，紧接着上述的flushSchedulerQueue，在微任务中一并执行\r\n *       ——> 由于在flushSchedulerQueue中会执行 watcher.run() 创建真实DOM，所以可以在$nextTick()回调中获取到最新DOM节点\r\n * \r\n * 总结：\r\n * 1. callbacks 中包含 flushSchedulerQueue，以及$nextTick()的回调\r\n * 2. dep.subs中每个watcher执行update时，最后都会执行nextick，\r\n * 3. 执行nextick是否会创建微任务，取决于上一个微任务是否完成\r\n * 4. 执行微任务在UI渲染完成之前，为何能拿到页面dom？：：：$nextTick()回调中获取的时内存中的DOM，不关心UI有没有渲染完成\r\n */\r\nexport function nextTick(cb) {\r\n  callbacks.push(cb);\r\n\r\n  if (!waiting) {\r\n    // 异步执行callBacks\r\n    Promise.resolve().then(flushCallbacks);\r\n    waiting = true;\r\n  }\r\n}\r\n","import { nextTick } from \"../util/next-tick\";\r\n\r\nlet queue = [];\r\nlet has = {}; // 维护存放了哪些watcher\r\n\r\n/**\r\n * queueWatcher逻辑：\r\n * 1. 对watcher去重（有相同watcher的情况下，不重复push）\r\n * 2. 防抖：一段时间内只执行一次的更新（遍历所有watcher，执行watcher.run()）\r\n */\r\nexport function queueWatcher(watcher) {\r\n  const id = watcher.id;\r\n\r\n  // watcher去重，即相同watcher只push一次\r\n  if (!has[id]) {\r\n    //  同步代码执行 把全部的watcher都放到队列里面去\r\n    queue.push(watcher);\r\n    has[id] = true;\r\n\r\n    // 开启一次异步更新操作，批处理（防抖）\r\n    // 进行异步调用\r\n    nextTick(flushSchedulerQueue);\r\n  }\r\n}\r\n\r\nfunction flushSchedulerQueue() {\r\n  for (let index = 0; index < queue.length; index++) {\r\n    // 调用watcher的run方法，执行真正的更新操作\r\n    queue[index].run();\r\n  }\r\n\r\n  // 执行完之后清空队列\r\n  queue = [];\r\n  has = {};\r\n}\r\n","import { pushTarget, popTarget } from \"./dep\";\r\nimport { queueWatcher } from \"./scheduler\";\r\nimport { isObject } from \"../util/index\";\r\n\r\n// 全局变量id  每次new Watcher都会自增\r\nlet id = 0;\r\nexport default class Watcher {\r\n  constructor(vm, exprOrFn, cb, options) {\r\n    this.vm = vm;\r\n    this.exprOrFn = exprOrFn;\r\n    this.cb = cb;\r\n    this.options = options;\r\n    this.user = !!options.user; // 表示是不是用户watcher\r\n    this.lazy = !!options.lazy; // 表示是不是computed watcher\r\n    this.dirty = this.lazy; // dirty可变，默认为true；表示计算watcher是否需要重新计算-执行用户定义的方法。\r\n\r\n    this.id = id++; // watcher的唯一标识\r\n\r\n    this.deps = []; //存放dep的容器\r\n    this.depsId = new Set(); //用来去重dep\r\n\r\n    /**\r\n     * 1. 渲染watcher中，exprOrFn为updateComponent()，是一个函数\r\n     * 2. 在用户watcher中，exprOrFn为字符串（watch中的属性名，即监听地属性）\r\n     */\r\n    // 当是渲染watcher 或 computed watcher时\r\n    if (typeof exprOrFn === \"function\") {\r\n      this.getter = exprOrFn;\r\n    } else {\r\n      // 当是用户自定义watcher时\r\n      this.getter = function () {\r\n        // watch的key可能是 'obj1.a.d' 这种格式，需要处理成vm.obj1.a.d\r\n        let path = exprOrFn.split(\".\");\r\n        let obj = vm;\r\n        for (let i = 0; i < path.length; i++) {\r\n          obj = obj[path[i]]; //vm.a.a.a.a.b\r\n        }\r\n        return obj; // 执行getter()，返回obj，会触发依赖收集，将用户watcher收集到监听的数据上\r\n      };\r\n    }\r\n\r\n    // 如果是计算属性watcher，则创建watcher的时候，什么都不执行（后续用到计算属性的时候再执行）\r\n    this.value = this.lazy ? undefined : this.get();\r\n  }\r\n\r\n  // new Watcher时会执行get方法；之后数据更新时，直接手动调用get方法即可\r\n  get() {\r\n    // 把当前watcher放到全局栈，并设置Dep.target（无法继承，具唯一性）为当前watcher\r\n    pushTarget(this);\r\n    /**\r\n     * 执行exprOrFn，如果watcher是渲染watcher，则exprOrFn为vm._update(vm._render())\r\n     * 在执行render函数的时候，获取变量会触发属性的getter（定义在对象数据劫持中），在getter中进行依赖收集\r\n     */\r\n    const res = this.getter.call(this.vm); // 如果是用户watcher，则上一次执行getter得到的值即为oldValue\r\n    // 执行完getter就把当前watcher删掉，以防止用户在methods/生命周期中访问data属性时进行依赖收集（数据劫持时会判断Dep.target是否存在）\r\n    popTarget(); // 在调用方法之后把当前watcher实例从全局watcher栈中移除，设置Dep.target为新的栈顶watcher\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * 1. 保证dep唯一，因为在render过程中，同一属性可能被多次调用，只需收集一次依赖即可；另外初始渲染收集过的dep，在更新时也不用再次收集（通过dep的id来判断）\r\n   * 2. 将dep放到watcher中的deps数组中\r\n   * 3. 在dep实例中添加watcher\r\n   */\r\n  addDep(dep) {\r\n    let id = dep.id;\r\n    if (!this.depsId.has(id)) {\r\n      this.depsId.add(id);\r\n      // 将dep放到watcher中的deps数组中\r\n      this.deps.push(dep);\r\n      // 直接调用dep的addSub方法  把自己watcher实例添加到dep的subs容器里面\r\n      dep.addSub(this);\r\n    }\r\n  }\r\n\r\n  // 更新当前watcher相关的视图\r\n  // Vue中的更新是异步的\r\n  // 当计算属性的依赖项发生改变，会触发依赖项相关 watcher（一般依赖项会收集computed watcher和渲染watcher，所以下面if、else都会走） 的update方法\r\n  update() {\r\n    // 计算属性的值发生变化，也会执行到update；\r\n    // 这里做个判断，如果是计算属性watcher，则将dirty设置成true，下次访问计算属性时就会重新计算。\r\n    if (this.lazy) {\r\n      this.dirty = true;\r\n      /**\r\n       * 计算属性的依赖不仅需要收集计算属性watcher，还应该收集渲染watcher，这样当依赖项改变的时候，页面才会重新渲染\r\n       */\r\n    } else {\r\n      // 每次watcher进行更新的时候，可以让他们先缓存起来，之后再一起调用\r\n      // 异步队列机制\r\n      queueWatcher(this);\r\n    }\r\n  }\r\n\r\n  // 在计算属性的代理中，当dirty为true时会执行evaluate\r\n  evaluate() {\r\n    this.value = this.get(); // 计算新值，并对依赖项收集computed watcher\r\n    this.dirty = false;\r\n  }\r\n  depend() {\r\n    // 计算属性的watcher存储了依赖项的dep\r\n    let i = this.deps.length;\r\n    while (i--) {\r\n      this.deps[i].depend(); // 调用依赖项的dep去收集渲染watcher\r\n    }\r\n  }\r\n\r\n  run() {\r\n    // 执行getter，更新视图/获取新值\r\n    const newVal = this.getter(); // 新值\r\n    const oldVal = this.value; //老值\r\n    this.value = newVal; // newVal就成为了现在的值；为了保证下一次更新时，上一次的新值是下一次的老值\r\n\r\n    // 如果是用户watcher\r\n    if (this.user) {\r\n      if (newVal !== oldVal || isObject(newVal)) {\r\n        this.cb.call(this.vm, newVal, oldVal);\r\n      }\r\n    } else {\r\n      // 渲染watcher\r\n      this.cb.call(this.vm);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * 数据初始化：initProps、initMethod、initData、initComputed、initWatch\r\n */\r\n\r\nimport { observe } from \"./observer/index\";\r\nimport { isFunction } from \"./util/index\";\r\nimport Watcher from \"./observer/watcher\";\r\nimport Dep from \"./observer/dep.js\";\r\n\r\nexport function initState(vm) {\r\n  const opts = vm.$options;\r\n  if (opts.props) {\r\n    initProps(vm);\r\n  }\r\n  if (opts.methods) {\r\n    initMethod(vm);\r\n  }\r\n  // 初始化data\r\n  if (opts.data) {\r\n    initData(vm);\r\n  }\r\n  // 初始化computed\r\n  if (opts.computed) {\r\n    initComputed(vm);\r\n  }\r\n  // 初始化watch\r\n  if (opts.watch) {\r\n    initWatch(vm);\r\n  }\r\n}\r\n\r\nfunction initProps() {}\r\nfunction initMethod() {}\r\n\r\n// 初始化data\r\nfunction initData(vm) {\r\n  let data = vm.$options.data;\r\n  // 往实例上添加一个属性 _data，即传入的data\r\n  // vue组件data推荐使用函数 防止数据在组件之间共享\r\n  data = vm._data = isFunction(data) ? data.call(vm) : data;\r\n\r\n  // 将vm._data上的所有属性代理到 vm 上\r\n  for (let key in data) {\r\n    proxy(vm, \"_data\", key);\r\n  }\r\n  // 对数据进行观测 -- 数据响应式\r\n  observe(data);\r\n}\r\n\r\n// 初始化computed\r\nfunction initComputed(vm) {\r\n  const computed = vm.$options.computed;\r\n  const watchers = vm._computedWatchers = {}; // 用watchers和vm._computedWatchers 用来存放计算watcher\r\n\r\n  for (let k in computed) {\r\n    const userDef = computed[k]; // 获取用户定义的计算属性；可能是函数。也可能是对象（内部有get、set函数）\r\n    // 获取computed的getter\r\n    let getter = typeof userDef === \"function\" ? userDef : userDef.get;\r\n\r\n    // 每个计算属性本质就是watcher\r\n    // 有多少个getter，就创建多少个watcher\r\n    // 创建计算watcher，lazy设置为true\r\n    watchers[k] = new Watcher(vm, getter, () => {}, { lazy: true });\r\n    // 将computed中的属性直接代理到vm下\r\n    defineComputed(vm, k, userDef);\r\n  }\r\n}\r\n\r\n/**\r\n * 1. 将computed中的属性直接代理到vm上\r\n * 2. 将代理的get进行包裹（即进行缓存处理，不用每次获取computed都进行重新计算）\r\n */\r\nconst sharedPropertyDefinition = {\r\n  enumerable: true,\r\n  configurable: true,\r\n  get: () => {},\r\n  set: () => {},\r\n};\r\nfunction defineComputed(vm, key, userDef) {\r\n  if (typeof userDef === \"function\") {    \r\n    sharedPropertyDefinition.get = createComputedGetter(key);\r\n  } else {\r\n    sharedPropertyDefinition.get = createComputedGetter(key);\r\n    sharedPropertyDefinition.set = userDef.set;\r\n  }\r\n  Object.defineProperty(vm, key, sharedPropertyDefinition);\r\n}\r\n// 取计算属性的值，走这个函数\r\nfunction createComputedGetter(key) {\r\n  return function () {\r\n    const watcher = this._computedWatchers[key];\r\n    if(watcher) {\r\n      // 根据dirty属性，判断是否需要重新计算（脏就是要调用getter，不脏就是直接取watcher.value）\r\n      if (watcher.dirty) {\r\n        watcher.evaluate(); // 计算属性取值的时候，如果是脏的，需要重新求值；依赖的参数会收集计算属性watcher；\r\n\r\n        /**\r\n         * 计算属性的依赖不仅需要收集计算属性watcher，还应该收集渲染watcher，这样当依赖项改变的时候，页面才会重新渲染；\r\n         * 在执行mountComponent时，会先设置Dep.target等于渲染watcher，然后将它push到targetStack中\r\n         * 当解析到计算属性时，将Dep.target设置成计算属性watcher，pushTarget()，依赖项收集当前计算属性watcher，然后popTarget()，然后依赖项收集当前渲染watcher\r\n         * 对所有计算属性循环此操作\r\n         * 将渲染watcher  popTarget()\r\n         */\r\n        // 如果Dep还存在target，这个时候一般为渲染watcher，计算属性依赖的数据需要继续收集渲染watcher\r\n        if (Dep.target) {\r\n          watcher.depend()\r\n        }\r\n      }\r\n      return watcher.value;\r\n    }\r\n  };\r\n}\r\n\r\n// 初始化watch\r\nfunction initWatch(vm) {\r\n  let watch = vm.$options.watch;\r\n  for (let k in watch) {\r\n    const handler = watch[k]; // 可能是数组、对象、函数、字符串，watch支持多种写法\r\n    if (Array.isArray(handler)) {\r\n      handler.forEach((handle) => {\r\n        createWatcher(vm, k, handle);\r\n      });\r\n    } else {\r\n      createWatcher(vm, k, handler);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createWatcher(vm, key, handler, options = {}) {\r\n  if (typeof handler === \"object\") {\r\n    options = handler; //保存用户传入的对象\r\n    handler = handler.handler; //是函数\r\n  }\r\n  if (typeof handler === \"string\") {\r\n    handler = vm[handler];\r\n  }\r\n  // watch相当于调用了 vm.$watch()\r\n  return vm.$watch(key, handler, options);\r\n}\r\n\r\n// 将vm._data上的属性代理到 vm 上\r\nfunction proxy(vm, source, key) {\r\n  Object.defineProperty(vm, key, {\r\n    get() {\r\n      return vm[source][key];\r\n    },\r\n    set(newValue) {\r\n      vm[source][key] = newValue;\r\n    },\r\n  });\r\n}\r\n\r\nexport function stateMixin(Vue) {\r\n  Vue.prototype.$watch = function (exprOrFn, cb, options) {\r\n    const vm = this;\r\n    // 这里表示是一个用户watcher\r\n    let watcher = new Watcher(vm, exprOrFn, cb, { ...options, user: true }); // user: true表示该watcher为用户自己创建地watcher\r\n    if (options.immediate) {\r\n      cb(watcher.value); // 如果立刻执行\r\n    }\r\n  };\r\n}\r\n","// 以下为vue源码的正则\r\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`; //匹配标签名；形如 abc-123\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`; //匹配特殊标签;形如 abc:234,前面的abc:可有可无；获取标签名；\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 匹配标签开头；形如  <  ；捕获里面的标签名\r\nconst startTagClose = /^\\s*(\\/?)>/; // 匹配标签结尾，形如 >、/>\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`); // 匹配结束标签 如 </abc-123> 捕获里面的标签名\r\nconst attribute =\r\n  /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // 匹配属性  形如 id=\"app\"\r\n\r\nexport function parse(template) {\r\n  /**\r\n   * handleStartTag、handleEndTag、handleChars将初始解析的结果，组装成一个树结构。\r\n   * 使用栈结构构建AST树\r\n   */\r\n  let root; // 根节点\r\n  let currentParent; // 下一个子元素的父元素\r\n  let stack = []; // 栈结构；栈中push/pop元素节点，对于文本节点，直接push到currentParent.children即可，不用push到栈中\r\n  // 表示元素和文本的type\r\n  const ELEMENT_TYPE = 1;\r\n  const TEXT_TYPE = 3;\r\n  // 创建AST节点\r\n  function createASTElement(tagName, attrs) {\r\n    return {\r\n      tag: tagName,\r\n      type: ELEMENT_TYPE,\r\n      children: [],\r\n      attrs,\r\n      parent: null,\r\n    };\r\n  }\r\n  // 对开始标签进行处理\r\n  function handleStartTag({ tagName, attrs }) {\r\n    let element = createASTElement(tagName, attrs);\r\n    // 如果没有根元素，则当前元素即为根元素\r\n    if (!root) {\r\n      root = element;\r\n    }\r\n    currentParent = element;\r\n    // 将元素放入栈中\r\n    stack.push(element);\r\n  }\r\n  // 对结束标签进行处理\r\n  function handleEndTag(tagName) {\r\n    // 处理到结束标签时，将该元素从栈中移出\r\n    let element = stack.pop();\r\n    // currentParent此时为element的上一个元素\r\n    currentParent = stack[stack.length - 1];\r\n    // 建立parent和children关系\r\n    if (currentParent) {\r\n      element.parent = currentParent;\r\n      currentParent.children.push(element);\r\n    }\r\n  }\r\n  // 对文本进行处理\r\n  function handleChars(text) {\r\n    // 去掉空格\r\n    text = text.replace(/\\s/g, \"\");\r\n    if (text) {\r\n      currentParent.children.push({\r\n        type: TEXT_TYPE,\r\n        text,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 递归解析template，进行初步处理\r\n   * 解析开始标签，将结果{tagName, attrs} 交给 handleStartTag 处理\r\n   * 解析结束标签，将结果 tagName 交给 handleEndTag 处理\r\n   * 解析文本门将结果 text 交给 handleChars 处理\r\n   */\r\n  while (template) {\r\n    // 查找 < 的位置，根据它的位置判断第一个元素是什么标签\r\n    let textEnd = template.indexOf(\"<\");\r\n\r\n    // 当第一个元素为 '<' 时，即碰到开始标签/结束标签时\r\n    if (textEnd === 0) {\r\n      // 匹配开始标签<div> 或 <image/>\r\n      const startTagMatch = parseStartTag();\r\n      if (startTagMatch) {\r\n        handleStartTag(startTagMatch);\r\n        continue; // continue 表示跳出本次循环，进入下一次循环\r\n      }\r\n\r\n      // 匹配结束标签</div>\r\n      const endTagMatch = template.match(endTag);\r\n      if (endTagMatch) {\r\n        // endTagMatch如果匹配成功，其格式为数组：['</div>', 'div']\r\n        advance(endTagMatch[0].length);\r\n        handleEndTag(endTagMatch[1]);\r\n        continue;\r\n      }\r\n    }\r\n\r\n    // 当第一个元素不是'<'，即第一个元素是文本时\r\n    let text;\r\n    if (textEnd >= 0) {\r\n      // 获取文本\r\n      text = template.substring(0, textEnd);\r\n    }\r\n    if (text) {\r\n      advance(text.length);\r\n      handleChars(text);\r\n    }\r\n  }\r\n\r\n  // 解析开始标签\r\n  function parseStartTag() {\r\n    // 1. 匹配开始标签\r\n    const start = template.match(startTagOpen);\r\n    // start格式为数组，形如 ['<div', 'div']；第二项为标签名\r\n    if (start) {\r\n      const match = {\r\n        tagName: start[1],\r\n        attrs: [],\r\n      };\r\n\r\n      //匹配到了开始标签，就把 <tagname 截取掉，往后继续匹配属性\r\n      advance(start[0].length);\r\n\r\n      // 2. 开始递归匹配标签属性\r\n      // end代表结束符号 > ；如果匹配成功，格式为：['>', '']\r\n      // attr 表示匹配的属性\r\n      let end, attr;\r\n      // 不是标签结尾，并且能匹配到属性时\r\n      while (\r\n        !(end = template.match(startTagClose)) &&\r\n        (attr = template.match(attribute))\r\n      ) {\r\n        // attr如果匹配成功，也是一个数组，格式为：[\"class=\\\"myClass\\\"\", \"class\", \"=\", \"myClass\", undefined, undefined]\r\n        // attr[1]为属性名，attr[3]/attr[4]/attr[5]为属性值，取决于属性定义是双引号/单引号/无引号\r\n\r\n        // 匹配成功一个属性，就在template上截取掉该属性，继续往后匹配\r\n        advance(attr[0].length);\r\n        attr = {\r\n          name: attr[1],\r\n          value: attr[3] || attr[4] || attr[5], //这里是因为正则捕获支持双引号（） 单引号 和无引号的属性值\r\n        };\r\n        match.attrs.push(attr);\r\n      }\r\n\r\n      // 3. 匹配到开始标签结尾\r\n      if (end) {\r\n        //   代表一个标签匹配到结束的>了 代表开始标签解析完毕\r\n        advance(1);\r\n        return match;\r\n      }\r\n    }\r\n  }\r\n\r\n  // 截取template字符串 每次匹配到了就【往前继续匹配】\r\n  function advance(n) {\r\n    template = template.substring(n);\r\n  }\r\n\r\n  // 返回生成的ast；root包含整个树状结构信息\r\n  return root;\r\n}\r\n","const defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g; // 匹配花括号 {{  }}；捕获花括号里面的内容\r\nfunction gen(node) {\r\n  // 如果是元素类型\r\n  if (node.type == 1) {\r\n    // 【关键】递归创建\r\n    return generate(node);\r\n  } else {\r\n    // else即文本类型\r\n    let text = node.text;\r\n\r\n    // 1. 如果text中不存在花括号变量表达式\r\n    if (!defaultTagRE.test(text)) {\r\n      // _v表示创建文本\r\n      return `_v(${JSON.stringify(text)})`;\r\n    }\r\n\r\n    // 正则是全局模式 每次需要重置正则的lastIndex属性，不然会引发匹配bug（defaultTagRE.exec()匹配完一次后，再次匹配为null，需要重置lastIndex）\r\n    let lastIndex = (defaultTagRE.lastIndex = 0);\r\n    let tokens = [];\r\n    let match, index;\r\n\r\n    // 2. 如果text中存在花括号变量（使用while循环，是因为可能存在多个{{变量}}）\r\n    while ((match = defaultTagRE.exec(text))) {\r\n      // match如果匹配成功，其结构为：['{{myValue}}', 'myValue', index: indexof({) ]\r\n      // index代表匹配到的位置\r\n      index = match.index;\r\n      // 初始 lastIndex 为0，index > lastIndex 表示在{{ 前有普通文本\r\n      if (index > lastIndex) {\r\n        // 在tokens里面放入 {{ 之前的普通文本\r\n        tokens.push(JSON.stringify(text.slice(lastIndex, index)));\r\n      }\r\n      // tokens中放入捕获到的变量内容\r\n      tokens.push(`_s(${match[1].trim()})`);\r\n      // 匹配指针后移，移到 }} 后面\r\n      lastIndex = index + match[0].length;\r\n    }\r\n\r\n    // 3. 如果匹配完了花括号，text里面还有剩余的普通文本，那么继续push\r\n    if (lastIndex < text.length) {\r\n      tokens.push(JSON.stringify(text.slice(lastIndex)));\r\n    }\r\n    // _v表示创建文本\r\n    return `_v(${tokens.join(\"+\")})`;\r\n  }\r\n}\r\n\r\n// 生成子节点：遍历children调用gen(item)，使用逗号拼接每一项的结果\r\nfunction getChildren(el) {\r\n  const children = el.children;\r\n  if (children) {\r\n    return `${children.map((c) => gen(c)).join(\",\")}`;\r\n  }\r\n}\r\n\r\n// 处理attrs/props属性：将[{name: 'class', value: 'home'}, {name: 'style', value: \"font-size:12px;color:red\"}]\r\n//                  转化成 \"class:\"home\",style:{\"font-size\":\"12px\",\"color\":\"red\"}\"\r\nfunction genProps(attrs) {\r\n  let str = \"\";\r\n  for (let i = 0; i < attrs.length; i++) {\r\n    let attr = attrs[i];\r\n    // 对attrs属性里面的style做特殊处理\r\n    if (attr.name === \"style\") {\r\n      let obj = {};\r\n      attr.value.split(\";\").forEach((item) => {\r\n        let [key, value] = item.split(\":\");\r\n        obj[key] = value;\r\n      });\r\n      attr.value = obj;\r\n    }\r\n    str += `${attr.name}:${JSON.stringify(attr.value)},`;\r\n  }\r\n  return `{${str.slice(0, -1)}}`;\r\n}\r\n\r\n// 将ast转化成render函数\r\nexport function generate(ast) {\r\n  let children = getChildren(ast);\r\n\r\n  let code = `_c('${ast.tag}',${\r\n    ast.attrs.length ? `${genProps(ast.attrs)}` : \"undefined\"\r\n  }${children ? `,${children}` : \"\"})`;\r\n\r\n  return code;\r\n}\r\n","import { parse } from \"./parse\";\r\nimport { generate } from \"./codegen\";\r\nexport function compileToFunctions(template) {\r\n  // 1. 把template转成AST语法树；AST用来描述代码本身形成树结构，不仅可以描述html，也能描述css以及js语法\r\n  let ast = parse(template);\r\n  console.log(\"🚀AST-----\", ast);\r\n  // 2. 优化静态节点\r\n  // 这个有兴趣的可以去看源码  不影响核心功能就不实现了\r\n  //   if (options.optimize !== false) {\r\n  //     optimize(ast, options);\r\n  //   }\r\n\r\n  // 3. 通过ast，重新生成代码\r\n  // 我们最后生成的代码需要和render函数一样\r\n  // 类似_c('div',{id:\"app\"},_c('div',undefined,_v(\"hello\"+_s(name)),_c('span',undefined,_v(\"world\"))))\r\n  // _c代表创建元素 _v代表创建文本 _s代表文Json.stringify--把对象解析成文本\r\n  let code = generate(ast);\r\n  console.log(\"🚀renderFunction-----\", code);\r\n  \r\n  // 通过new Function生成函数\r\n  let renderFn = new Function(`with(this){return ${code}}`);\r\n  return renderFn;\r\n}\r\n","export function patch(oldVnode, vnode) {\r\n  // 第一次渲染组件元素时；没有$el，也没有oldVnode\r\n  if (!oldVnode) {\r\n    // 组件的创建过程是没有el属性的\r\n    return createElm(vnode);\r\n  } else {\r\n    // Vnode没有设置nodeType，值为undefined；真实节点可以获取到nodeType\r\n    const isRealElement = oldVnode.nodeType;\r\n    // 如果是初次渲染\r\n    if (isRealElement) {\r\n      const oldElm = oldVnode;\r\n      const parentElm = oldElm.parentNode;\r\n      // 将虚拟dom转化成真实dom节点\r\n      const el = createElm(vnode);\r\n\r\n      // 插入到 老的el节点 的下一个节点的前面，就相当于插入到老的el节点的后面\r\n      // 这里不直接使用父元素appendChild是为了不破坏替换的位置\r\n      parentElm.insertBefore(el, oldElm.nextSibling);\r\n\r\n      // 删除老的el节点\r\n      parentElm.removeChild(oldVnode);\r\n      return el;\r\n    } else {\r\n      /**\r\n       * 如果是更新视图\r\n       */\r\n      // 1. 如果标签名不一样，直接删掉老的，换成新的\r\n      // debugger;\r\n      if (oldVnode.tag !== vnode.tag) {\r\n        // vnode.el就是在 createElm(vnode)创建真实dom时添加到vnode上的，vnode.el是真实dom\r\n        oldVnode.el.parentNode.replaceChild(createElm(vnode), oldVnode.el); // oldVnode.el代表的是真实dom节点\r\n      }\r\n      // 2. 如果新旧节点是一个文本节点（新节点是一个文本节点，则旧节点一定是文本节点，否则两者tag不同，会走上面的判断）\r\n      if (!vnode.tag) {\r\n        if (oldVnode.text !== vnode.text) {\r\n          oldVnode.el.textContent = vnode.text;\r\n        }\r\n      }\r\n      // 3. 不符合上面两种，代表标签名一致，并且不是文本节点\r\n      const el = (vnode.el = oldVnode.el); // 为了节点复用 所以直接把旧的虚拟dom对应的真实dom赋值给新的虚拟dom的el属性\r\n      updateProperties(vnode, oldVnode.data); // 更新属性\r\n      const oldCh = oldVnode.children || []; // 老的儿子\r\n      const newCh = vnode.children || []; // 新的儿子\r\n      if (oldCh.length > 0 && newCh.length > 0) {\r\n        // 3.1. 新老都存在子节点\r\n        updateChildren(el, oldCh, newCh); // 【核心算法】\r\n      } else if (oldCh.length) {\r\n        // 3.2 老的有儿子，新的没有\r\n        el.innerHTML = \"\";\r\n      } else if (newCh.length) {\r\n        // 3.3 新的有儿子，老的没儿子\r\n        for (let i = 0; i < newCh.length; i++) {\r\n          const child = newCh[i];\r\n          el.appendChild(createElm(child));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 虚拟dom转成真实dom\r\nfunction createElm(vnode) {\r\n  const { tag, data, key, children, text } = vnode;\r\n  // 判断虚拟dom 是元素节点、自定义组件 还是文本节点（文本节点tag为undefined）\r\n  if (typeof tag === \"string\") {\r\n    // 如果是组件，返回组件渲染的真实dom\r\n    if (createComponent(vnode)) {\r\n      return vnode.componentInstance.$el;\r\n    }\r\n\r\n    // 否则是元素\r\n    // 虚拟dom的el属性指向真实dom，方便后续更新diff算法操作\r\n    vnode.el = document.createElement(tag);\r\n    // 解析vnode属性\r\n    updateProperties(vnode);\r\n    // 如果有子节点就递归插入到父节点里面\r\n    children.forEach((child) => {\r\n      return vnode.el.appendChild(createElm(child));\r\n    });\r\n  } else {\r\n    // 否则是文本节点\r\n    vnode.el = document.createTextNode(text);\r\n  }\r\n  return vnode.el;\r\n}\r\n\r\n// 创建组件的真实dom\r\nfunction createComponent(vnode) {\r\n  // 初始化组件，创建组件实例\r\n  let i = vnode.data;\r\n  // 相当于执行 vnode.data.hook.init(vnode)\r\n  if ((i = i.hook) && (i = i.init)) {\r\n    i(vnode);\r\n  }\r\n  // 如果组件实例化完毕，有componentInstance属性，那证明是组件\r\n  if (vnode.componentInstance) {\r\n    vnode.el = vnode.componentInstance.$el; // 【关键】\r\n    return true;\r\n  }\r\n}\r\n\r\n// 解析vnode的data属性，映射到真实dom上\r\n// 初次调用时oldProps为空，更新时oldProps可能有值，都可以调用此方法来解析vnode的属性\r\nfunction updateProperties(vnode, oldProps = {}) {\r\n  let newProps = vnode.data || {};\r\n  let el = vnode.el; // 真实节点\r\n\r\n  // 如果新的节点没有该属性，需要把老的节点属性移除\r\n  for (let k in oldProps) {\r\n    if (!newProps[k]) {\r\n      el.removeAttribute(k);\r\n    }\r\n  }\r\n\r\n  // 对style样式做特殊处理，如果新的没有，需要把老的style值置为空\r\n  let newStyle = newProps.style || {};\r\n  let oldStyle = oldProps.style || {};\r\n  for (let key in oldStyle) {\r\n    if (!newStyle[key]) {\r\n      el.style[key] = \"\";\r\n    }\r\n  }\r\n\r\n  // 遍历新的属性，进行增加操作\r\n  for (const key in newProps) {\r\n    if (key === \"style\") {\r\n      for (const styleName in newProps.style) {\r\n        el.style[styleName] = newProps.style[styleName];\r\n      }\r\n    } else if (key === \"class\") {\r\n      el.className = newProps.class;\r\n    } else {\r\n      // 给这个元素添加属性 值就是对应的值\r\n      el.setAttribute(key, newProps[key]);\r\n    }\r\n  }\r\n}\r\n\r\n// 判断两个vnode的标签和key是否相同，如果相同，就可以认为是同一节点就地复用\r\nfunction isSameVnode(oldVnode, newVnode) {\r\n  return oldVnode.tag === newVnode.tag && oldVnode.key === newVnode.key;\r\n}\r\n// diff算法核心，采用双指针的方式，对比新老vnode的儿子节点\r\nfunction updateChildren(parent, oldCh, newCh) {\r\n  let oldStartIndex = 0; //老儿子的起始下标\r\n  let oldStartVnode = oldCh[0]; //老儿子的第一个节点\r\n  let oldEndIndex = oldCh.length - 1; //老儿子的结束下标\r\n  let oldEndVnode = oldCh[oldEndIndex]; //老儿子的结束节点\r\n\r\n  let newStartIndex = 0; // 新儿子的，同上\r\n  let newStartVnode = newCh[0];\r\n  let newEndIndex = newCh.length - 1;\r\n  let newEndVnode = newCh[newEndIndex];\r\n\r\n  // 根据key来创建老的儿子的index映射表；类似 {'a':0,'b':1}：表示key为'a'的节点在第一个位置，key为'b'的节点在第二个位置\r\n\r\n  function makeIndexByKey(children) {\r\n    let map = {};\r\n    children.forEach((item, index) => {\r\n      item.key && (map[item.key] = index);\r\n    });\r\n    return map;\r\n  }\r\n  // 生成oldCh的映射表（key:index）\r\n  let keysMap = makeIndexByKey(oldCh);\r\n\r\n  // 只有当新老儿子的双指标的起始位置不大于结束位置的时候，才能循环；\r\n  // 一方的开始位置大于结束位置，说明该方循环完毕，需要结束循环\r\n  while (oldStartIndex <= oldEndIndex && newStartIndex <= newEndIndex) {\r\n    // 如果节点已经被移走了，直接跳过\r\n    if (!oldStartVnode) {\r\n      oldStartVnode = oldCh[++oldStartIndex];\r\n    } else if (!oldEndVnode) {\r\n      oldEndVnode = oldCh[--oldEndIndex];\r\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\r\n      // 头头比较\r\n      patch(oldStartVnode, newStartVnode); // 递归比较儿子以及他们的子节点\r\n      // 指针往后移一位，startVnode也相应改变\r\n      oldStartVnode = oldCh[++oldStartIndex];\r\n      newStartVnode = newCh[++newStartIndex];\r\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\r\n      // 尾尾比较\r\n      patch(oldEndVnode, newEndVnode); // 递归比较儿子以及他们的子节点\r\n      // 指针往前移一位，endVnode也相应改变\r\n      oldEndVnode = oldCh[--oldEndIndex];\r\n      newEndVnode = newCh[--newEndIndex];\r\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\r\n      // 头尾比较\r\n      patch(oldStartVnode, newEndVnode);\r\n      //  比较完，就需要将递归的结果，放到oldEndVnode后面（因为新的是在尾部，所以当头尾比较满足samavnode时，需要将老的vnode移到尾部，与newCh顺序保持一致）\r\n      parent.insertBefore(oldStartVnode.el, oldEndVnode.el.nextSibling); // 比较完，就需要将结果移动到末尾\r\n      // 指针改变，oldStartVnode、newEndVnode相应改变\r\n      oldStartVnode = oldCh[++oldStartIndex];\r\n      newEndVnode = newCh[--newEndIndex];\r\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\r\n      // 尾头比较\r\n      patch(oldEndVnode, newStartVnode);\r\n      //  比较完，就需要将递归的结果，放到oldStartVnode前面（因为新的是在头部，所以当尾头比较满足samavnode时，需要将老的vnode移到头部，与newCh顺序保持一致）\r\n      parent.insertBefore(oldEndVnode.el, oldStartVnode.el);\r\n      // 指针改变，oldEndVnode、newStartVnode相应改变\r\n      oldEndVnode = oldCh[--oldEndIndex];\r\n      newStartVnode = newCh[++newStartIndex];\r\n    } else {\r\n      // 如果以上四种情况都不满足，需要进行暴力对比\r\n      // 在oldCh中寻找newStartVnode对应key相同的节点（keysMap是表示oldCh中key-index对应关系的对象）\r\n      let moveIndex = keysMap[newStartVnode.key];\r\n      if (!moveIndex) {\r\n        // 如果老的节点找不到与newStartVnode相同key的节点，则直接将newStartVnode插入\r\n        parent.insertBefore(createElm(newStartVnode), oldStartVnode.el);\r\n      } else {\r\n        // 如果在oldCh中找到与newStartVnode相同key的节点\r\n        let moveVnode = oldCh[moveIndex]; // 找得到就拿到老的节点\r\n        oldCh[moveIndex] = null; //  这个是占位操作，避免数组塌陷，防止老节点移动走了之后破坏了初始的映射表位置，即后续如果再次采用乱序比对会出现索引位置错乱（因为moveVnode是根据索引获取的）\r\n        parent.insertBefore(moveVnode.el, oldStartVnode.el); //把找到的节点移动到最前面\r\n        patch(moveVnode, newStartVnode); //  递归patch\r\n      }\r\n      // 指针和newStartVnode相应做出改变\r\n      newStartVnode = newCh[++newStartIndex];\r\n    }\r\n  }\r\n\r\n  // 如果老节点循环完毕了，但是新节点还有；证明新节点需要被添加到头部或者尾部\r\n  if (newStartIndex <= newEndIndex) {\r\n    // 此时newStartIndex并非为0，而是等于oldCh比对完时，newCh所处的位置\r\n    // 遍历newCh剩余的节点，生成真实dom，插入到parent中\r\n    for (let i = newStartIndex; i <= newEndIndex; i++) {\r\n      // 看下一个指针是否为null，不是的话，取它的el属性\r\n      // 这是一个优化写法 insertBefore的第二个参数是null等同于appendChild作用\r\n      const anchor =\r\n        newCh[newEndIndex + 1] == null ? null : newCh[newEndIndex + 1].el;\r\n      parent.insertBefore(createElm(newCh[i]), anchor);\r\n    }\r\n  }\r\n\r\n  // 如果新节点循环完毕，老节点还有；证明老的节点需要直接被删除\r\n  if (oldStartIndex <= oldEndIndex) {\r\n    // 遍历oldCh剩余的节点，将他们从parent中删除\r\n    for (let i = oldStartIndex; i <= oldEndIndex; i++) {\r\n      let child = oldCh[i];\r\n      if (!child) {\r\n        parent.removeChild(child.el);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { patch } from \"./vdom/patch\";\r\nimport Watcher from \"./observer/watcher\";\r\n\r\nexport function lifecycleMixin(Vue) {\r\n  // _update：初始挂载及后续更新\r\n  // 更新的时候，不会重新进行模板编译，因为更新只是数据发生变化，render函数没有改变。\r\n  Vue.prototype._update = function (vnode) {\r\n    const vm = this;\r\n    const prevVnode = vm._vnode; // 获取上一次的vnode\r\n    vm._vnode = vnode; // 保存本次的vnode\r\n\r\n    // 【核心】patch是渲染vnode为真实dom\r\n    if (!prevVnode) {\r\n      // 初次渲染\r\n      vm.$el = patch(vm.$el, vnode); // 初次渲染 vm._vnode肯定不存在 要通过虚拟节点 渲染出真实的dom 赋值给$el属性\r\n    } else {\r\n      // 视图更新\r\n      vm.$el = patch(prevVnode, vnode); // 更新时把上次的vnode和这次更新的vnode穿进去 进行diff算法\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * 1. 调用render方法，生成虚拟DOM —— 即执行 vm._render()\r\n * 2. 将VNode渲染成真实DOM —— 即执行 vm._update(VNode)\r\n */\r\nexport function mountComponent(vm, el) {\r\n  // 定义vm.$el，如果时组件，options上没有el属性，vm.$el为undefined\r\n  vm.$el = el;\r\n  // 执行beforeMount生命周期钩子\r\n  callHook(vm, \"beforeMount\");\r\n\r\n  let updateComponent = () => {\r\n    vm._update(vm._render());\r\n  };\r\n\r\n  // 每个组件渲染的时候，都会创建一个watcher，并执行updateComponent；true表示是渲染Watcher\r\n  new Watcher(\r\n    vm,\r\n    updateComponent,\r\n    () => {\r\n      console.log('视图更新了')\r\n      callHook(vm, \"beforeUpdate\");\r\n    },\r\n    true\r\n  );\r\n  callHook(vm, \"mounted\");\r\n}\r\n\r\nexport function callHook(vm, hook) {\r\n  // vm.$options[hook]经过mergeOptions合并之后，是一个数组\r\n  const handlers = vm.$options[hook];\r\n  if (handlers) {\r\n    for (let i = 0; i < handlers.length; i++) {\r\n      handlers[i].call(vm); //生命周期里面的this指向当前实例\r\n    }\r\n  }\r\n}\r\n","/**\r\n * initMixin\r\n * 表示在vue的基础上做一次混合操作\r\n */\r\nimport { initState } from \"./state\";\r\nimport { compileToFunctions } from './compiler/index'\r\nimport { callHook, mountComponent } from './lifecycle'\r\nimport { mergeOptions } from \"./util/index\";\r\n\r\nexport function initMixin(Vue) {\r\n  Vue.prototype._init = function (options) {\r\n    // this指向实例\r\n    const vm = this;\r\n    // 将全局的Vue.options（也有可能是继承的其他组件的options，所以下面使用的是vm.constructor.options而不是Vue.options）与组件中的options进行合并\r\n    // 将合并之后的结果放到vm.$options上\r\n    vm.$options = mergeOptions(vm.constructor.options, options);\r\n    console.log('$options-----',vm.$options)\r\n    callHook(vm, \"beforeCreate\");\r\n    \r\n    // 初始化状态，包括initProps、initMethod、initData、initComputed、initWatch等\r\n    initState(vm);\r\n\r\n    callHook(vm, \"created\");\r\n    // 如果有el属性 进行模板渲染\r\n    if (vm.$options.el) {\r\n      vm.$mount(vm.$options.el);\r\n    }\r\n  };\r\n\r\n  Vue.prototype.$mount = function (el) {\r\n    // $mount 由vue实例调用，所以this指向vue实例\r\n    const vm = this;\r\n    const options = vm.$options;\r\n    el = document.querySelector(el);\r\n\r\n    /**\r\n     * 1. 把模板转化成render函数\r\n     * 2. 执行render函数，生成VNode\r\n     * 3. 更新时进行diff\r\n     * 4. 产生真实DOM\r\n     */\r\n    // 可以直接在options中写render函数，它的优先级比template高\r\n    if (!options.render) {\r\n      let template = options.template;\r\n\r\n      // 如果不存在render和template但是存在el属性，则直接将template赋值为el元素\r\n      if (!template && el) {\r\n        template = el.outerHTML;\r\n      }\r\n\r\n      // 最终需要把tempalte模板转化成render函数\r\n      if (template) {\r\n        // 将template转化成render函数\r\n        const render = compileToFunctions(template);\r\n        options.render = render;\r\n      }\r\n    }\r\n\r\n    // 调用render方法，渲染成真实DOM\r\n    // 组件挂载方法\r\n    return mountComponent(vm, el);\r\n  };\r\n}\r\n","import { isReservedTag, isObject } from \"../util/index\";\r\n\r\nexport default class Vnode {\r\n  /**\r\n   * @param {标签名} tag\r\n   * @param {属性} data\r\n   * @param {标签唯一的key} key\r\n   * @param {子节点} children\r\n   * @param {文本节点} text\r\n   * @param {组件节点的其他属性} componentOptions\r\n   */\r\n  constructor(tag, data, key, children, text, componentOptions) {\r\n    this.tag = tag;\r\n    this.data = data;\r\n    this.key = key;\r\n    this.children = children;\r\n    this.text = text;\r\n    this.componentOptions = componentOptions;\r\n  }\r\n}\r\n\r\n// 创建元素vnode\r\nexport function createElement(vm, tag, data = {}, ...children) {\r\n  let key = data.key;\r\n  // 如果是普通标签\r\n  if (isReservedTag(tag)) {\r\n    return new Vnode(tag, data, key, children);\r\n  } else {\r\n    // 否则就是组件\r\n    let Ctor = vm.$options.components[tag]; // 获取组件的构造函数\r\n    return createComponent(vm, tag, data, key, children, Ctor);\r\n  }\r\n}\r\n\r\n// 组件处理\r\nfunction createComponent(vm, tag, data, key, children, Ctor) {\r\n  // Ctor如果是局部组件，则为一个对象；如果是全局组件（Vue.component创建的），则为一个构造函数\r\n  if (isObject(Ctor)) {\r\n    Ctor = vm.$options._base.extend(Ctor);\r\n  }\r\n\r\n  // 定义组件自己内部的生命周期；\r\n  // 【关键】等会渲染组件时，需要调用此初始化方法\r\n  data.hook = {\r\n    // 组件创建过程的自身初始化方法\r\n    init(vnode) {\r\n      // new Ctor()相当于执行Vue.extend()，即相当于new Sub；则组件会将自己的配置与{ _isComponent: true }合并\r\n      let child = (vnode.componentInstance = new Ctor({ _isComponent: true })); // 实例化组件\r\n      // 因为没有传入el属性，需要手动挂载，为了在组件实例上面增加$el方法可用于生成组件的真实渲染节点\r\n      child.$mount(); // 组件挂载后会在vm上添加vm.$el 真实dom节点\r\n    },\r\n  };\r\n\r\n  // 组件vnode也叫占位符vnode  ==> $vnode\r\n  return new Vnode(\r\n    `vue-component-${tag}`,\r\n    data,\r\n    key,\r\n    undefined,\r\n    undefined,\r\n    {\r\n      Ctor,\r\n      children,\r\n    }\r\n  );\r\n}\r\n\r\n// 创建文本vnode\r\nexport function createTextNode(vm, text) {\r\n  return new Vnode(undefined, undefined, undefined, undefined, text);\r\n}\r\n","import { createElement, createTextNode } from \"./vdom/index\";\r\nimport { nextTick } from \"./util/next-tick\";\r\n\r\nexport function renderMixin(Vue) {\r\n  Vue.prototype._c = function (...args) {\r\n    // 创建虚拟dom元素\r\n    return createElement(this,...args);\r\n  };\r\n  Vue.prototype._v = function (text) {\r\n    // 创建虚拟dom文本\r\n    return createTextNode(this,text);\r\n  };\r\n  Vue.prototype._s = function (val) {\r\n    // 如果模板里面的是一个对象，需要JSON.stringify\r\n    return val == null\r\n      ? \"\"\r\n      : typeof val === \"object\"\r\n      ? JSON.stringify(val)\r\n      : val;\r\n  };\r\n\r\n  Vue.prototype._render = function () {\r\n    const vm = this;\r\n    // 获取模板编译生成的render方法\r\n    const { render } = vm.$options;\r\n    \r\n    // 生成vnode--虚拟dom\r\n    const vnode = render.call(vm);\r\n    console.log(\"🚀vnode-----\", vnode);\r\n    return vnode;\r\n  };\r\n\r\n  // 挂载在原型的nextTick方法\r\n  Vue.prototype.$nextTick = nextTick;\r\n}\r\n","import { mergeOptions } from '../util/index'\r\n\r\nexport default function initMixin(Vue) {\r\n    Vue.mixin = function(mixin) {\r\n        // this 指向 VUe，this.options即Vue.options\r\n        // 将mixin合并到Vue.options中，而组件会和Vue.options合并，所以最后会把mixin合并到组件中\r\n        this.options = mergeOptions(this.options,mixin)\r\n        return this;\r\n    }\r\n}","import { mergeOptions } from \"../util/index\";\r\n\r\nexport default function initExtend(Vue) {\r\n  let cid = 0;\r\n\r\n  // Vue.extend(extendOptions)做的事情就是：创建子类，继承Vue父类；并且身上有父类的所有功能\r\n  Vue.extend = function (extendOptions) {\r\n    // 创建子类的构造函数，并且调用初始化方法\r\n    const Sub = function VueComponent(options) {\r\n      this._init(options); // this指向子类的实例\r\n    };\r\n    Sub.cid = cid++; // 组件的唯一标识\r\n\r\n    // 使用原型继承，将子类继承父类\r\n    Sub.prototype = Object.create(this.prototype); // 子类原型指向父类\r\n    Sub.prototype.constructor = Sub; // constructor指向自己\r\n\r\n    Sub.options = mergeOptions(this.options, extendOptions); // 合并自己的extendOptions和父类的options（即Vue.options）\r\n    return Sub;\r\n  };\r\n}\r\n","import { ASSETS_TYPE } from \"./const\";\r\nexport default function initAssetRegisters(Vue) {\r\n  ASSETS_TYPE.forEach((type) => {\r\n    Vue[type] = function (id, definition) {\r\n      if (type === \"component\") {\r\n        // Vue.component(id,definition)就是调用 Vue.extend(definition)，并配置Vue.options.components.id = definition\r\n        definition = this.options._base.extend(definition);\r\n      } else if (type === \"filter\") {\r\n        // ...\r\n      } else if (type === \"directive\") {\r\n        // ...\r\n      }\r\n\r\n      // 配置Vue.options[components/filters/directive]\r\n      this.options[type + \"s\"][id] = definition;\r\n    };\r\n  });\r\n}\r\n","import initMixin from \"./mixin\";\r\nimport initExtend from \"./extend\";\r\nimport { ASSETS_TYPE } from \"./const\";\r\nimport initAssetRegisters from \"./assets\";\r\n\r\nexport function initGlobalApi(Vue) {\r\n  // 每个组件初始化的时候都会和Vue.options选项进行合并\r\n  Vue.options = {}; // 用来存放全局属性，例如Vue.component、Vue.filter、Vue.directive\r\n  initMixin(Vue);\r\n\r\n  // 初始化Vue.options.components、Vue.options.directives、Vue.options.filters设为空对象\r\n  ASSETS_TYPE.forEach((type) => {\r\n    Vue.options[type + \"s\"] = {};\r\n  });\r\n\r\n  // Vue.options会与组件的options合并，所以无论创建多少子类，都可以通过实例的options._base找到Vue\r\n  Vue.options._base = Vue;\r\n  initExtend(Vue); // 注册extend方法\r\n\r\n  initAssetRegisters(Vue); // 注册Vue.component()、Vue.filter()、Vue.directive()方法\r\n}\r\n","import { initMixin } from \"./init\";\r\nimport { lifecycleMixin } from \"./lifecycle\";\r\nimport { renderMixin } from \"./render\";\r\nimport { initGlobalApi } from \"./global-api/index\";\r\nimport { stateMixin } from \"./state\";\r\n\r\nfunction Vue(options) {\r\n  // new Vue创建实例时会调用_init()方法\r\n  this._init(options);\r\n}\r\ninitMixin(Vue); // 在原型上挂载_init()（数据监控；props、events、computed、watch初始化等）、$mount()（compiler流程）方法\r\nlifecycleMixin(Vue); // 在原型上挂载 _update()方法（第一次创建dom及更新dom（有diff过程））\r\nrenderMixin(Vue); //  在原型上挂载_c、_v、_s、$nextTick、_render()方法\r\nstateMixin(Vue);  // initData、initComputed、initWatch等\r\ninitGlobalApi(Vue); // initMixin（Vue.mixin(options)）\r\n\r\nexport default Vue;\r\n"],"names":["ASSETS_TYPE","LIFECYCLE_HOOKS","strats","mergeHook","parentVal","childVal","concat","forEach","hook","mergeAssets","res","Object","create","k","type","mergeOptions","parent","child","options","mergeFiled","hasOwnProperty","key","isObject","val","isFunction","isReservedTag","tagName","str","obj","split","tag","oldArrayPrototype","Array","prototype","arrayMethods","methods","method","args","result","call","ob","__ob__","inserted","slice","observeArray","dep","notify","id","Dep","subs","target","addDep","watcher","update","push","targetStack","pushTarget","popTarget","pop","length","Observer","data","value","defineProperty","enumerable","writable","configurable","isArray","__proto__","walk","item","observe","keys","defineReactive","childOb","get","depend","dependArray","set","newVal","console","log","e","i","l","callbacks","flushCallbacks","cb","waiting","nextTick","Promise","resolve","then","queue","has","queueWatcher","flushSchedulerQueue","index","run","Watcher","vm","exprOrFn","user","lazy","dirty","deps","depsId","Set","getter","path","undefined","add","addSub","oldVal","initState","opts","$options","props","initData","computed","initComputed","watch","initWatch","_data","proxy","watchers","_computedWatchers","userDef","defineComputed","sharedPropertyDefinition","createComputedGetter","evaluate","handler","handle","createWatcher","$watch","source","newValue","stateMixin","Vue","immediate","ncname","qnameCapture","startTagOpen","RegExp","startTagClose","endTag","attribute","parse","template","root","currentParent","stack","ELEMENT_TYPE","TEXT_TYPE","createASTElement","attrs","children","handleStartTag","element","handleEndTag","handleChars","text","replace","textEnd","indexOf","startTagMatch","parseStartTag","endTagMatch","match","advance","substring","start","end","attr","name","n","defaultTagRE","gen","node","generate","test","JSON","stringify","lastIndex","tokens","exec","trim","join","getChildren","el","map","c","genProps","ast","code","compileToFunctions","renderFn","Function","patch","oldVnode","vnode","createElm","isRealElement","nodeType","oldElm","parentElm","parentNode","insertBefore","nextSibling","removeChild","replaceChild","textContent","updateProperties","oldCh","newCh","updateChildren","innerHTML","appendChild","createComponent","componentInstance","$el","document","createElement","createTextNode","init","oldProps","newProps","removeAttribute","newStyle","style","oldStyle","styleName","className","setAttribute","isSameVnode","newVnode","oldStartIndex","oldStartVnode","oldEndIndex","oldEndVnode","newStartIndex","newStartVnode","newEndIndex","newEndVnode","makeIndexByKey","keysMap","moveIndex","moveVnode","anchor","lifecycleMixin","_update","prevVnode","_vnode","mountComponent","callHook","updateComponent","_render","handlers","initMixin","_init","constructor","$mount","querySelector","render","outerHTML","Vnode","componentOptions","Ctor","components","_base","extend","_isComponent","renderMixin","_c","_v","_s","$nextTick","mixin","initExtend","cid","extendOptions","Sub","VueComponent","initAssetRegisters","definition","initGlobalApi"],"mappings":"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"}